// -------------------------------------------------------------------------------
// Project     : CS2000, TowerDefense Project
// File Name   : MoveLogic.jack
// Class       : CS2020, AY16-Q1
// Date        : 9/14/2015
// Author      : Micah Akin and Paul Haagenson
// Version     : v1.0
// Environment : Notepad++
// Copyright   : This work was done by employees of the U.S. Government
//               and is in the public domain.
// -------------------------------------------------------------------------------

/**
 * Implements the board's move logic. Takes a vertical and horizontal dimension as inputs
 * and initiates the board. Each square has values which help in calculation later.
 */
class MoveLogic {

    // Is this square occupied
    field Array blockedArray;
    
    // default to max, but otherwise is how many steps to the exit
    field Array valueArray;
    
    // direction to the exit: default to 0:Stop, 1:Up, 2: Right, 3: Down, 4: Left
    field Array directionArray;
    
    // direction to the exit: default to 0:Stop, 1:Up, 2: Right, 3: Down, 4: Left
    field Array visitedArray;
    
    // A couple useful things to know about the board size
    field int max;
    field int mX;
    field int mY;
    
    constructor MoveLogic new(int xColumnIn, int yRowIn) {
        var int i;
        let max = xColumnIn * yRowIn;
        let mX = xColumnIn;
        let mY = yRowIn;
        
        let blockedArray = Array.new(max);
        let valueArray = Array.new(max);
        let directionArray = Array.new(max);
        let visitedArray = Array.new(max);
        let i = 0;
        
        while (i < max) {
            let blockedArray[i] = false;
            let valueArray[i] = max;
            let directionArray[i] = 0;
            let visitedArray[i] = false;
            let i = i + 1;
            }
        
        return this;        
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do blockedArray.dispose();
        do valueArray.dispose();
        do directionArray.dispose();
        do visitedArray.dispose();
        do Memory.deAlloc(this);
        return;
    }   
    
    method void changeCount(int indexRc, int newCount){ //In case you need to manually change a square's count value.
        let valueArray[indexRc] = newCount;
        return;
    }
    
    method void changeBlocked(Coordinate pos, boolean newBlocked){  //Pass an index (pos - 1) and true in order to set this square to blocked.
        var int i, x, y;
        let x = pos.getX()/(512/mX);
        let y = pos.getY()/(256/mY);
        let i = y * mX + x;
        let blockedArray[i] = newBlocked;
        return;
    }
    
    method void resetRouteTo(Coordinate start){  //Invoke this to reset all counts on the board.
        var int i, x, y;
        let i = 0;
        while (i < max){
            let valueArray[i] = max;
            let directionArray[i] = 0;
            let visitedArray[i] = false;
            let i = i + 1;
            }
        let x = start.getX()/(512/mX);
        let y = start.getY()/(256/mY);
        do setRouteTo(x, y, 0, 0);
        return;
    }
    
    /**
    method void setRouteTo (Coordinate start) {
        var int i, j, x, y, alt;
        var PriorityList Q, u;
        var boolean flag;
        
        let x = start.getX()/(512/mX);
        let y = start.getY()/(256/mY);
        
        let i = y*mX+x;
        let Q = PriorityList.new(mX, mY);
        
        //do setRouteValues(i, 0, 0);
        
        let flag = true;
        let valueArray[i] = 0;
        do Q.insert(0, x, y);
        let u = Q.pop();
        
        while(flag) {
            let x = u.getX();
            let y = u.getY();
            let i = y*mX+x;
            
                 
            if (blockedArray[i] = false) {
                let alt = valueArray[i] + 1;
                
                // 0:Stop, 1:Up, 2: Right, 3: Down, 4: Left
                
                // Left of this square
                if (x > 0){
                    let j = i - 1;
                    if(alt < valueArray[j]){
                        let valueArray[j] = alt;
                        let directionArray[j] = 2;
                        do Q.insert(alt, x-1, y);
                        }
                    }
                // Right of this square
                if (x+1 < mX){
                    let j = i + 1;
                    if(alt < valueArray[j]){
                        let valueArray[j] = alt;
                        let directionArray[j] = 2;
                        do Q.insert(alt, x+1, y);
                        }
                    }
                // Below this square
                if (y+1 < mY){
                    let j = i + mX;
                    if(alt < valueArray[j]){
                        let valueArray[j] = alt;
                        let directionArray[j] = 1;
                        do Q.insert(alt, x, y+1);
                        }
                    }
                // Above this square
                if (y > 0){
                    let j = i - mX;
                    if(alt < valueArray[j]){
                        let valueArray[j] = alt;
                        let directionArray[j] = 3;
                        do Q.insert(alt, x, y-1);
                        }
                    }
                else {
                    
                    }
                }
            
            let u = Q.pop();
            if(u.getWeight()<0){
                let flag = false;
                }
            }
            
        do Q.rDispose();
        return;
        }    
    */
    
    method void setRouteTo (int inX, int inY, int previousCount, int moveDirection) {
        var int i;
        let i = inY*mX+inX;   
        
        if (previousCount < (mX+mY)) {
            if (valueArray[i] > previousCount) {
                let valueArray[i] = previousCount;
                let directionArray[i] = moveDirection;
                
                if ((blockedArray[i] = false) & (visitedArray[i] = false)) {
                    
                    // Left of this square
                    if (inX > 0){
                        do setRouteTo (inX - 1, inY, previousCount + 1, 2);
                        }
                    
                    // Below this square
                    if ((inY + 1) < mY){
                        do setRouteTo (inX, inY + 1, previousCount + 1, 1);
                        }
                    // Above this square
                    if (inY > 0){
                        do setRouteTo (inX, inY - 1, previousCount + 1, 3);
                        }
                    // Right of this square
                    if ((inX + 1) < mX){
                        do setRouteTo (inX + 1, inY, previousCount + 1, 4);
                        }
                    }
                }
                let visitedArray[i] = true;
            }
        return;
    }
    
    method int nextMove(Coordinate pos){   
        var int i, startX, startY, direction;
        let startX = pos.getX()/(512/mX);
        let startY = pos.getY()/(256/mY);
        let i = ((((startY) * mX) + startX));
        if (i < max) {
            let direction = directionArray[i];
        }
        // 0:Stop, 1:Up, 2: Right, 3: Down, 4: Left
        return direction;
    }
    
    method void printSquare (int printIndex) {
        do Output.printString(" Looking at square: ");
        do Output.printInt(printIndex);
        do Output.printString(" Value assigned is: ");
        do Output.printInt(valueArray[printIndex]);
        return;
    }
}
    