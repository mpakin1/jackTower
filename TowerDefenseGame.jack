// -------------------------------------------------------------------------------
// Project     : CS2000, TowerDefense Project
// File Name   : TowerDefenseGame.jack
// Class       : CS2020, AY16-Q1
// Date        : 9/9/2015
// Author      : Micah Akin and Paul Haagenson
// Version     : v1.0
// Environment : TextWrangler 4.5.12 (3398)
// Copyright   : This work was done by employees of the U.S. Government
//               and is in the public domain.
// -------------------------------------------------------------------------------

/**
 * Implements the Tower Defense game.
 * In this game you can place towers on the screen and
 * watch the waves of enemy die due to its expert placement.
 * In the beginning, the tower is moved into position using arrow keys 
 * when the user is satisfied with its location, the user hits enter.  
 * The enter key places the tower and starts the first wave of enemy.
 * Each successive wave of enemy grows in number and the quantities of 
 * towers grows also.
 * The 'q' key is used to quit the game.
 */
class TowerDefenseGame {

    // The Towers
    field Tower rootTower;

    // The Enemies
    field Enemy rootEnemy;

    // The difficulty 
    field int difficulty;  // 0=easiest
    
    // Board Square size
    field int brdSqr;
    
    // Board entrance and exit
    field Coordinate entrance, exit, center;
    
    /** Construct a new TowerDefense Game **/
    constructor TowerDefenseGame new() {
        
        let brdSqr = 512 / 32;
        let difficulty = 0;
        let entrance = Coordinate.new(brdSqr*0, brdSqr*8);
        let exit = Coordinate.new(brdSqr*30, brdSqr*8);
        let center = Coordinate.new(brdSqr*16, brdSqr*8);
        let rootTower = null;
        let rootEnemy = null;
        
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        if (~(rootTower = null)){
            do rootTower.dispose();
        }
        if (~(rootEnemy = null)){
            do rootEnemy.dispose();
        }
        
        do Memory.deAlloc(this);
        return;
    }
    
    /** Redraw the board to ensure items are cleanly displayed */
    method void reDraw() {
        // Clear the screen
        do Screen.clearScreen(); 
        
        // Draw all towers 
        if (~(rootTower = null)){
            do rootTower.rDraw();
        }
        
        // Draw all enemy 
        if (~(rootEnemy = null)){
            do rootEnemy.rDraw();
        }
        return;
    }

    /** Starts the game. Handles inputs from the user that control
     *  the square's movement, direction and size. */
    method void run() {
        var char key;
        var boolean exit;
        var int roundNum;
        var int winState; // 0: enemy wins, 1: towers win, 2: game on

        let exit = false;
        let winState = 2;
        let roundNum = 0;
        
        do newRound();

        while (~exit) {
            // waits for a key to be pressed.
            while ((key = 0) & (winState = 2)) {
                let key = Keyboard.keyPressed();
                let winState = gameRound(roundNum);
                let roundNum = roundNum + 1;
            }

            if (key = 81) {
                let exit = true;
            }
            
            if (winState = 0) { 
                let exit = true;
            }
            
            if (winState = 1) { 
                let rootEnemy = null;
                do run();
                let exit = true;
            }

        }
            
        return;
    }
    
    
    /** Builds a new round */
    method void newRound() {
        var Tower newTower;
        let difficulty = difficulty + 1;
            
        // Build a new tower
        let newTower = Tower.new(center, brdSqr, 20, brdSqr*3);
        
        // Put it in the linked list of towers
        if (rootTower = null){
            let rootTower = newTower;
        } else {
            do rootTower.insert(newTower);
        }
        // Place the new tower
        do placeTower(newTower);
    
        return;
    }
    
    /** Move a tower and set it in place */
    method void placeTower(Tower newTower) {
        var char key;
        var boolean place;

        let place = false;

        while (~place) {
            // waits for a key to be pressed.
            while (key = 0) {
                let key = Keyboard.keyPressed();
            }

            // Enter key
            if (key = 128) {
                let place = true;
            }
            
            // Up
            if (key = 131) {
                do newTower.moveUp();
            }
            // Down
            if (key = 133) { 
                do newTower.moveDown();
            }
            // Left
            if (key = 130) { 
                do newTower.moveLeft();
            }
            // Right
            if (key = 132) { 
                do newTower.moveRight();
            }
            

            // waits for the key to be released.
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do reDraw();
            }
        }
            
        return;
    }

    /** Play 1 round within a game */
    method int gameRound(int roundNum) {
        var int winState; // 0: enemy wins, 1: towers win, 2: game on
        var Enemy newEnemy;
        let winState = 2;
        
        // Add new enemy at entrance
        if (roundNum < difficulty) { 
            let newEnemy = Enemy.new(entrance, brdSqr, 100);
            if (~(rootEnemy = null)) {
                do rootEnemy.insert(newEnemy);
            } else { 
                let rootEnemy = newEnemy;
            }
        }
        
        // Move the enemy
        let winState = Math.min(rootEnemy.move(exit),winState);
        
        // Shoot the enemy
        let winState = Math.min(rootTower.attack(rootEnemy),winState);
        
        do reDraw();

        do Sys.wait(200); // Delays the next movement.
        return winState;
    }
}