// -------------------------------------------------------------------------------
// Project     : CS2000, TowerDefense Project
// File Name   : Tower.jack
// Class       : CS2020, AY16-Q1
// Date        : 9/9/2015
// Author      : Micah Akin and Paul Haagenson
// Version     : v1.0
// Environment : TextWrangler 4.5.12 (3398)
// Copyright   : This work was done by employees of the U.S. Government
//               and is in the public domain.
// -------------------------------------------------------------------------------

/**
 * Implements a tower. A tower has a screen location
 * and a size. It also has methods for drawing, erasing, moving on the 
 * screen, and changing its size.
 */
class Tower {

    // Location on the screen
    field int x, y;

    // The size of the tower
    field int size;

    /** Constructs a new tower with a given location and size. */
    constructor Tower new(int Ax, int Ay, int Asize) {
        let x = Ax;
        let y = Ay;
        let size = Asize;
        
        do draw();
        do placeTower();

        return this;
    }
    
    
    /** Move a tower and set it in place */
    method void placeTower() {
        var char key;
        var boolean place;

        let place = false;

        while (~place) {
            // waits for a key to be pressed.
            while (key = 0) {
                let key = Keyboard.keyPressed();
            }

            if (key = 128) {
                let place = true;
            }
            
            /**
            if (key = 90) {
                do square.decSize();
            }
            if (key = 88) {
                do square.incSize();
            }
            */
            
            // Up
            if (key = 131) {
                do moveUp();
            }
            // Down
            if (key = 133) { 
                do moveDown();
            }
            // Left
            if (key = 130) { 
                do moveLeft();
            }
            // Right
            if (key = 132) { 
                do moveRight();
            }
            

            // waits for the key to be released.
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
            }
        }
            
        return;
    }


    /** Deallocates the object's memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Draws the tower on the screen. */
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }

    /** Erases the tower from the screen. */
    method void erase() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }

    /** Increments the size by 2 pixels. */
    method void incSize() {
        if (((y + size) < 254) & ((x + size) < 510)) {
            do erase();
            let size = size + 2;
            do draw();
        }
        return;
    }

    /** Decrements the size by 2 pixels. */
    method void decSize() {
        if (size > 2) {
            do erase();
            let size = size - 2;
            do draw();
        }
        return;
	}

    /** Moves up by 2 pixels. */
    method void moveUp() {
        if ((y - size) > 1) {
            do erase();
            let y = y - size;
            do draw();
        }
        return;
    }

    /** Moves down by 2 pixels. */
    method void moveDown() {
        if ((y + size + size) < 256) {
            do erase();
            let y = y + size;
            do draw();
        }
        return;
    }

    /** Moves left by 2 pixels. */
    method void moveLeft() {
        if ((x + size) > 1) {
            do erase();
            let x = x - size;
            do draw();
        }
        return;
    }

    /** Moves right by 2 pixels. */
    method void moveRight() {
        if ((x + size + size) < 512) {
            do erase();
            let x = x + size;
            do draw();
        }
        return;
    }
}