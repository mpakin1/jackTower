// -------------------------------------------------------------------------------
// Project     : CS2000, TowerDefense Project
// File Name   : Tower.jack
// Class       : CS2020, AY16-Q1
// Date        : 9/9/2015
// Author      : Micah Akin and Paul Haagenson
// Version     : v1.0
// Environment : TextWrangler 4.5.12 (3398)
// Copyright   : This work was done by employees of the U.S. Government
//               and is in the public domain.
// -------------------------------------------------------------------------------

/**
 * Implements a tower. A tower has a screen location
 * and a size. It also has methods for drawing, erasing, moving on the 
 * screen, and changing its size.
 */
class Tower {

    // Next and previous towers in linked list
    field Tower next, prev;

    // Location on the screen
    field int x, y;

    // The size of the tower
    field int size;

    // The range and damage of the tower
    field int damage, range;
    
    // Tower's number
    field int name;

    /** Constructs a new tower with a given location and size. */
    constructor Tower new(Coordinate inCrd, int inSize, int inDamage, int inRange) {
        let next = null;
        let prev = null;
        let x = inCrd.getX();
        let y = inCrd.getY();
        let size = inSize;
        let damage = inDamage;
        let range = inRange;
        let name = 0;
        
        do draw();

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        if (~(next = null)) {
            do next.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Set the tower's name */
    method void setName(int inName) {
        let name = inName;
        return;
    }

    /** Get the tower's name */
    method int getName() {
        return name;
    }

    /** Draws the tower on the screen. */
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }

    /** Recursively draws all the tower on the screen. */
    method void rDraw() {
        if (~(next = null)){
            do next.rDraw();
        }
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }

    /** Erases the tower from the screen. */
    method void erase() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }


    /**
     *   LINKED LIST FUNCTIONS
     */
    
    /** Recursive Insert */
    method void insert(Tower inTower) {
        if (next = null) { 
            let next = inTower;
            do next.setName(name+1);
            do next.setPrev(this);
        } else { 
            do next.insert(inTower);
        }
        return;
    }
    
    /** Setter for next */
    method void setNext(Tower inNext) {
        let next = inNext;
        return;
    }
    
    /** Setter for prev */
    method void setPrev(Tower inPrev) {
        let prev = inPrev;
        return;
    }
    
    /** Getter for next */
    method Tower getNext() {
        return next;
    }
    
    /** Getter for prev */
    method Tower getPrev() {
        return prev;
    }


    /**
     *   POSITION FUNCTIONS
     */

    /** Moves up by 1 square. */
    method void moveUp() {
        if ((y - size) > 1) {
            do erase();
            let y = y - size;
            do draw();
        }
        return;
    }

    /** Moves down by 1 square. */
    method void moveDown() {
        if ((y + size + size) < 256) {
            do erase();
            let y = y + size;
            do draw();
        }
        return;
    }

    /** Moves left by 1 square. */
    method void moveLeft() {
        if ((x + size) > 1) {
            do erase();
            let x = x - size;
            do draw();
        }
        return;
    }

    /** Moves right by 1 square. */
    method void moveRight() {
        if ((x + size + size) < 512) {
            do erase();
            let x = x + size;
            do draw();
        }
        return;
    }
    
    /** Getter for X */
    method int getX() {
        return x;
    }
    
    /** Getter for Y */
    method int getY() {
        return y;
    }
    
    /** Getter for Crd */
    method Coordinate getCrd() {
        var Coordinate myCrd;
        let myCrd = Coordinate.new(x, y);
        return myCrd;
    }
    
    /** Compares 2 Coordinates */
    method boolean equals(Coordinate inCrd) {
        return inCrd.equals(getCrd());
    }
    
    /** Getter for range */
    method int getRange() {
        return range;
    }


    /**
     *   SPECIAL FUNCTIONS
     */
    
    /** Getter for damage */
    method int getDamage() {
        return damage;
    }
    
    /** Recursive Attack */
    method int attack(Enemy inEnemy) {
        var int winState;  // 0: enemy wins, 1: towers win, 2: game on
        
        // do Output.printString("Twr:");
        // do Output.printInt(name);     
        // do Output.printString(" ");   
        let winState = inEnemy.attack(getCrd(), range, damage);
        
        if (~(next = null)) {
            let winState = Math.max(next.attack(inEnemy),winState);
        }
        
        // do Output.printString("wS:");
        // do Output.printInt(winState);     
        // do Output.printString(" ");  
        return winState;
    }
}